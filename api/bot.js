// –¶–µ–π –ª–æ–≥ –º–∞—î –∑'—è–≤–∏—Ç–∏—Å—è –≤ –ª–æ–≥–∞—Ö Vercel, —è–∫—â–æ —Ñ–∞–π–ª –≤–∑–∞–≥–∞–ª—ñ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è
console.log("Bot file started! (Version with order flow and image explanation)")

import TelegramBot from "node-telegram-bot-api"
import express from "express"

const token = process.env.TELEGRAM_BOT_TOKEN
const app = express()
const port = process.env.PORT || 3000

const bot = new TelegramBot(token)

app.use(express.json())

// –û–±—Ä–æ–±–∫–∞ webhook –∑–∞–ø–∏—Ç—ñ–≤.
app.post(`/api/webhook`, (req, res) => {
  console.log("Received webhook request on /api/webhook!") // –õ–æ–≥ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≤—Ö—ñ–¥–Ω–æ–≥–æ webhook
  bot.processUpdate(req.body)
  res.sendStatus(200)
})

// –ó–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É.
app.get("/", (req, res) => {
  console.log("Received root path request on /!") // –õ–æ–≥ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –∫–æ—Ä–µ–Ω–µ–≤–∏–π —à–ª—è—Ö
  res.send("Telegram Bot is running!")
})

// --- –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ ---
const headphones = {
  soundcore_p30i: {
    name: "Soundcore P30i",
    price: 79, // –ü—Ä–∏–∫–ª–∞–¥ —Ü—ñ–Ω–∏
    colors: ["black", "pink"],
    image: "/images/soundcore_p30i.jpg", // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –£–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_liberty_4: {
    name: "Soundcore Liberty 4",
    price: 129, // –ü—Ä–∏–∫–ª–∞–¥ —Ü—ñ–Ω–∏
    colors: ["black"],
    image: "/images/soundcore_liberty_4.jpg", // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –£–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_liberty_3_pro: {
    name: "Soundcore Liberty 3 Pro",
    price: 99, // –ü—Ä–∏–∫–ª–∞–¥ —Ü—ñ–Ω–∏
    colors: ["black", "white"],
    image: "/images/soundcore_liberty_3_pro.jpg", // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –£–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_space_a40: {
    name: "Soundcore Space A40",
    price: 119, // –ü—Ä–∏–∫–ª–∞–¥ —Ü—ñ–Ω–∏
    colors: ["black", "white", "dark_blue"],
    image: "/images/soundcore_space_a40.jpg", // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –£–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_aerofit: {
    name: "Soundcore AeroFit",
    price: 139, // –ü—Ä–∏–∫–ª–∞–¥ —Ü—ñ–Ω–∏
    colors: ["black", "pink"],
    image: "/images/soundcore_aerofit.jpg", // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –£–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_a20_sleep: {
    name: "Soundcore A20 Sleep",
    price: 149, // –ü—Ä–∏–∫–ª–∞–¥ —Ü—ñ–Ω–∏
    colors: ["white"],
    image: "/images/soundcore_a20_sleep.jpg", // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –£–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_tune: {
    name: "Soundcore TUNE",
    price: 59, // –ü—Ä–∏–∫–ª–∞–¥ —Ü—ñ–Ω–∏
    colors: ["black"],
    image: "/images/soundcore_tune.jpg", // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –£–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_q21i_nc: {
    name: "Soundcore Q21i NC",
    price: 69, // –ü—Ä–∏–∫–ª–∞–¥ —Ü—ñ–Ω–∏
    colors: ["black"],
    image: "/images/soundcore_q21i_nc.jpg", // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –£–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_space_one: {
    name: "Soundcore Space One",
    price: 109, // –ü—Ä–∏–∫–ª–∞–¥ —Ü—ñ–Ω–∏
    colors: ["black", "light_blue"],
    image: "/images/soundcore_space_one.jpg", // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –£–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_space_one_pro: {
    name: "Soundcore Space One Pro",
    price: 159, // –ü—Ä–∏–∫–ª–∞–¥ —Ü—ñ–Ω–∏
    colors: ["black", "cream"],
    image: "/images/soundcore_space_one_pro.jpg", // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –£–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_liberty_4_pro: {
    name: "Soundcore Liberty 4 Pro",
    price: 179, // –ü—Ä–∏–∫–ª–∞–¥ —Ü—ñ–Ω–∏
    colors: ["black"],
    image: "/images/soundcore_liberty_4_pro.jpg", // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –ö–æ—Ä–æ–±–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_liberty_4_nc: {
    name: "Soundcore Liberty 4 NC",
    price: 139, // –ü—Ä–∏–∫–ª–∞–¥ —Ü—ñ–Ω–∏
    colors: ["black", "white", "blue"],
    image: "/images/soundcore_liberty_4_nc.jpg", // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –ö–æ—Ä–æ–±–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_aerofit_pro: {
    name: "Soundcore AeroFit Pro",
    price: 189, // –ü—Ä–∏–∫–ª–∞–¥ —Ü—ñ–Ω–∏
    colors: ["black", "blue"],
    image: "/images/soundcore_aerofit_pro.jpg", // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –ö–æ—Ä–æ–±–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
}

// –ö–æ–ª—å–æ—Ä–∏ –∑ –µ–º–æ–¥–∑—ñ
const colorEmojis = {
  white: "‚ö™ –ë—ñ–ª–∏–π",
  black: "‚ö´ –ß–æ—Ä–Ω–∏–π",
  silver: "üîò –°—Ä—ñ–±–ª—è—Å—Ç–∏–π",
  blue: "üîµ –°–∏–Ω—ñ–π",
  red: "üî¥ –ß–µ—Ä–≤–æ–Ω–∏–π",
  pink: "üå∏ –†–æ–∂–µ–≤–∏–π",
  dark_blue: "üíô –¢–µ–º–Ω–æ-—Å–∏–Ω—ñ–π",
  light_blue: "üíß –°–≤—ñ—Ç–ª–æ-–±–ª–∞–∫–∏—Ç–Ω–∏–π",
  cream: "üç¶ –ö—Ä–µ–º–æ–≤–∏–π",
}

// –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫–æ—à–∏–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–≤ –ø–∞–º'—è—Ç—ñ, –¥–∞–Ω—ñ –≤—Ç—Ä–∞—á–∞—é—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É)
const userCarts = new Map()

// –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
const userStates = new Map() // userId -> { step: 'awaiting_name', orderData: {} }

// --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ callback –∑–∞–ø–∏—Ç—ñ–≤ ---

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id
  // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
  userStates.delete(chatId)
  const welcomeMessage = `
üéß –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É –Ω–∞–≤—É—à–Ω–∏–∫—ñ–≤ Soundcore!

–í—Å—ñ –Ω–∞–≤—É—à–Ω–∏–∫–∏ –Ω–æ–≤—ñ, –∞–ª–µ —É–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞. –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î.

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:
  `

  const options = {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üõçÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥", callback_data: "catalog" }],
        [{ text: "üõí –ú—ñ–π –∫–æ—à–∏–∫", callback_data: "cart" }],
        [{ text: "‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—Å", callback_data: "about" }],
      ],
    },
  }

  try {
    await bot.sendMessage(chatId, welcomeMessage, options)
  } catch (error) {
    console.error("Error sending /start message:", error)
  }
})

// –û–±—Ä–æ–±–∫–∞ callback –∑–∞–ø–∏—Ç—ñ–≤
bot.on("callback_query", async (callbackQuery) => {
  console.log("Callback query handler triggered!")
  const message = callbackQuery.message
  const chatId = message.chat.id
  const data = callbackQuery.data
  const userId = callbackQuery.from.id

  console.log("Received callback query data:", data)

  try {
    // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —ñ–Ω—ñ—Ü—ñ—é—î–º–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    if (userStates.has(chatId) && data !== "cancel_order") {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–µ—Ä—à—ñ—Ç—å –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
      })
      return
    }

    if (data === "catalog") {
      await showCatalog(chatId)
    } else if (data === "cart") {
      await showCart(chatId, userId)
    } else if (data === "about") {
      await showAbout(chatId)
    } else if (data.startsWith("product_")) {
      const productId = data.replace("product_", "")
      await showProduct(chatId, productId, userId)
    } else if (data.startsWith("color_")) {
      const [, productId, color] = data.split("_")
      await selectColor(chatId, userId, productId, color)
    } else if (data.startsWith("add_to_cart_")) {
      const [, , , productId, color] = data.split("_")
      await addToCart(chatId, userId, productId, color)
    } else if (data.startsWith("remove_")) {
      const itemIndex = Number.parseInt(data.replace("remove_", ""))
      await removeFromCart(chatId, userId, itemIndex)
    } else if (data === "checkout") {
      await startCheckout(chatId, userId) // –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—á–∞—Ç–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è
    } else if (data === "back_to_catalog") {
      await showCatalog(chatId)
    } else if (data === "back_to_main") {
      await showMainMenu(chatId)
    } else if (data === "cancel_order") {
      await cancelOrder(chatId)
    }

    await bot.answerCallbackQuery(callbackQuery.id)
  } catch (error) {
    console.error("Error handling callback:", error)
    await bot.answerCallbackQuery(callbackQuery.id, { text: "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞" })
  }
})

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–¥–ª—è –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è)
bot.on("message", async (msg) => {
  const chatId = msg.chat.id
  const userId = msg.from.id
  const text = msg.text

  // –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ —î —á–∞—Å—Ç–∏–Ω–æ—é –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
  if (text.startsWith("/") && text !== "/start") {
    if (userStates.has(chatId)) {
      await bot.sendMessage(
        chatId,
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–µ—Ä—à—ñ—Ç—å –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –ø–µ—Ä—à –Ω—ñ–∂ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏.",
      )
    }
    return
  }

  // –Ø–∫—â–æ —Ü–µ –∫–æ–º–∞–Ω–¥–∞ /start, –æ–±—Ä–æ–±–ª—è—î–º–æ —ó—ó –æ–∫—Ä–µ–º–æ
  if (text === "/start") {
    // bot.onText(/\/start/) –≤–∂–µ –æ–±—Ä–æ–±–∏—Ç—å —Ü–µ
    return
  }

  const currentState = userStates.get(chatId)

  if (currentState) {
    try {
      switch (currentState.step) {
        case "awaiting_name":
          currentState.orderData.fullName = text
          currentState.step = "awaiting_email"
          await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É (email):", {
            reply_markup: {
              inline_keyboard: [[{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "cancel_order" }]],
            },
          })
          break
        case "awaiting_email":
          if (!/\S+@\S+\.\S+/.test(text)) {
            await bot.sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É.")
            return
          }
          currentState.orderData.email = text
          currentState.step = "awaiting_phone"
          await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, +380XXXXXXXXX):", {
            reply_markup: {
              inline_keyboard: [[{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "cancel_order" }]],
            },
          })
          break
        case "awaiting_phone":
          if (!/^\+?\d{10,15}$/.test(text)) {
            await bot.sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
            return
          }
          currentState.orderData.phone = text
          currentState.step = "awaiting_address"
          await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–≤—É–ª–∏—Ü—è, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞):", {
            reply_markup: {
              inline_keyboard: [[{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "cancel_order" }]],
            },
          })
          break
        case "awaiting_address":
          currentState.orderData.address = text
          currentState.step = "awaiting_city"
          await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:", {
            reply_markup: {
              inline_keyboard: [[{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "cancel_order" }]],
            },
          })
          break
        case "awaiting_city":
          currentState.orderData.city = text
          userStates.delete(chatId) // –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞–Ω
          await finalizeOrder(chatId, userId, currentState.orderData)
          break
      }
    } catch (error) {
      console.error("Error processing user input:", error)
      await bot.sendMessage(
        chatId,
        "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
      )
    }
  } else {
    // –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞–Ω—É, —ñ–≥–Ω–æ—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ
    // await bot.sendMessage(chatId, '–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –∞–±–æ –∫–æ–º–∞–Ω–¥–æ—é /start.');
  }
})

// –ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async function showMainMenu(chatId) {
  const welcomeMessage = `
üéß –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É –Ω–∞–≤—É—à–Ω–∏–∫—ñ–≤ Soundcore!

–í—Å—ñ –Ω–∞–≤—É—à–Ω–∏–∫–∏ –Ω–æ–≤—ñ, –∞–ª–µ —É–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞. –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î.

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:
  `

  const options = {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üõçÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥", callback_data: "catalog" }],
        [{ text: "üõí –ú—ñ–π –∫–æ—à–∏–∫", callback_data: "cart" }],
        [{ text: "‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—Å", callback_data: "about" }],
      ],
    },
  }

  try {
    await bot.sendMessage(chatId, welcomeMessage, options)
  } catch (error) {
    console.error("Error sending main menu message:", error)
  }
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥
async function showCatalog(chatId) {
  const catalogMessage = "üéß –ö–∞—Ç–∞–ª–æ–≥ –Ω–∞–≤—É—à–Ω–∏–∫—ñ–≤ Soundcore:\n\n–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É:"

  const keyboard = Object.keys(headphones).map((productId) => [
    {
      text: `${headphones[productId].name} ${typeof headphones[productId].price === "number" ? `- $${headphones[productId].price}` : ""}`,
      callback_data: `product_${productId}`,
    },
  ])

  keyboard.push([{ text: "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data: "back_to_main" }])

  const options = {
    reply_markup: {
      inline_keyboard: keyboard,
    },
  }

  try {
    await bot.sendMessage(chatId, catalogMessage, options)
  } catch (error) {
    console.error("Error sending catalog message:", error)
  }
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç
async function showProduct(chatId, productId, userId) {
  const product = headphones[productId]
  if (!product) return

  // –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π VERCEL_URL —Ç—É—Ç, —â–æ–± –≤—ñ–Ω –∑–∞–≤–∂–¥–∏ –±—É–≤ —Å–≤—ñ–∂–∏–º
  const currentWebhookUrl = process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : "https://example.com" // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è

  const productMessage = `
üéß ${product.name}

${typeof product.price === "number" ? `üí∞ –¶—ñ–Ω–∞: $${product.price}` : "üí∞ –¶—ñ–Ω–∞: –£—Ç–æ—á–Ω—é–π—Ç–µ"}
üìù ${product.description}

üé® –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–ª—å–æ—Ä–∏:
  `

  const colorKeyboard = product.colors.map((color) => [
    {
      text: colorEmojis[color],
      callback_data: `color_${productId}_${color}`,
    },
  ])

  colorKeyboard.push([{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data: "back_to_catalog" }])

  const options = {
    reply_markup: {
      inline_keyboard: colorKeyboard,
    },
  }

  // –ö–æ–Ω—Å—Ç—Ä—É—é—î–º–æ –ø–æ–≤–Ω—É URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  const fullImageUrl = `${currentWebhookUrl}${product.image}`
  console.log("DEBUG: VERCEL_URL (inside showProduct):", process.env.VERCEL_URL) // –õ–æ–≥—É—î–º–æ —Å–∏—Ä–∏–π VERCEL_URL
  console.log("DEBUG: Constructed fullImageUrl (inside showProduct):", fullImageUrl) // –õ–æ–≥—É—î–º–æ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω—É URL

  try {
    await bot.sendPhoto(chatId, fullImageUrl, {
      caption: productMessage,
      reply_markup: options.reply_markup,
    })
  } catch (error) {
    console.error("Error sending product photo:", error)
    // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è
    try {
      await bot.sendMessage(chatId, `–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ. ${productMessage}`, options)
    } catch (fallbackError) {
      console.error("Error sending fallback message:", fallbackError)
    }
  }
}

// –í–∏–±—ñ—Ä –∫–æ–ª—å–æ—Ä—É
async function selectColor(chatId, userId, productId, color) {
  const product = headphones[productId]
  if (!product) return

  const confirmMessage = `
‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏:
üéß ${product.name}
üé® –ö–æ–ª—ñ—Ä: ${colorEmojis[color]}
${typeof product.price === "number" ? `üí∞ –¶—ñ–Ω–∞: $${product.price}` : "üí∞ –¶—ñ–Ω–∞: –£—Ç–æ—á–Ω—é–π—Ç–µ"}

–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞?
  `

  const options = {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üõí –î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞", callback_data: `add_to_cart_${productId}_${color}` }],
        [{ text: "üé® –û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –∫–æ–ª—ñ—Ä", callback_data: `product_${productId}` }],
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data: "back_to_catalog" }],
      ],
    },
  }

  try {
    await bot.sendMessage(chatId, confirmMessage, options)
  } catch (error) {
    console.error("Error sending color selection message:", error)
  }
}

// –î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞
async function addToCart(chatId, userId, productId, color) {
  const product = headphones[productId]
  if (!product) return

  if (!userCarts.has(userId)) {
    userCarts.set(userId, [])
  }

  const cart = userCarts.get(userId)
  cart.push({
    productId,
    name: product.name,
    color,
    price: product.price, // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ü—ñ–Ω—É —è–∫ —î (—Ä—è–¥–æ–∫ –∞–±–æ —á–∏—Å–ª–æ)
  })

  const successMessage = `
‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!

üéß ${product.name}
üé® ${colorEmojis[color]}
${typeof product.price === "number" ? `üí∞ $${product.price}` : "üí∞ –¶—ñ–Ω–∞: –£—Ç–æ—á–Ω—é–π—Ç–µ"}

–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?
  `

  const options = {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üõí –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", callback_data: "cart" }],
        [{ text: "üõçÔ∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏", callback_data: "catalog" }],
        [{ text: "üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "checkout" }],
      ],
    },
  }

  try {
    await bot.sendMessage(chatId, successMessage, options)
  } catch (error) {
    console.error("Error sending add to cart message:", error)
  }
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—à–∏–∫
async function showCart(chatId, userId) {
  const cart = userCarts.get(userId) || []

  if (cart.length === 0) {
    const emptyMessage = "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π\n\n–ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–æ–≤–∞—Ä—ñ–≤."
    const options = {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data: "catalog" }],
          [{ text: "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data: "back_to_main" }],
        ],
      },
    }
    try {
      await bot.sendMessage(chatId, emptyMessage, options)
    } catch (error) {
      console.error("Error sending empty cart message:", error)
    }
    return
  }

  let cartMessage = "üõí –í–∞—à –∫–æ—à–∏–∫:\n\n"
  let total = 0 // –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞, —è–∫—â–æ –≤—Å—ñ —Ü—ñ–Ω–∏ —á–∏—Å–ª–æ–≤—ñ

  cart.forEach((item, index) => {
    cartMessage += `${index + 1}. ${item.name}\n`
    cartMessage += `   üé® ${colorEmojis[item.color]}\n`
    cartMessage += `   üí∞ ${typeof item.price === "number" ? `$${item.price}` : "–¶—ñ–Ω—É —É—Ç–æ—á–Ω—é–π—Ç–µ"}\n\n`

    // –î–æ–¥–∞—î–º–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü—ñ–Ω–∞ —á–∏—Å–ª–æ–≤–∞
    if (typeof item.price === "number") {
      total += item.price
    }
  })

  cartMessage += `üí≥ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${total > 0 ? `$${total}` : "–£—Ç–æ—á–Ω—é–π—Ç–µ"}`

  const keyboard = cart.map((item, index) => [{ text: `‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ ${item.name}`, callback_data: `remove_${index}` }])

  keyboard.push(
    [{ text: "üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "checkout" }],
    [{ text: "üõçÔ∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏", callback_data: "catalog" }],
  )

  const options = {
    reply_markup: {
      inline_keyboard: keyboard,
    },
  }

  try {
    await bot.sendMessage(chatId, cartMessage, options)
  } catch (error) {
    console.error("Error sending cart message:", error)
  }
}

// –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –∫–æ—à–∏–∫–∞
async function removeFromCart(chatId, userId, itemIndex) {
  const cart = userCarts.get(userId) || []

  if (itemIndex >= 0 && itemIndex < cart.length) {
    const removedItem = cart.splice(itemIndex, 1)[0]
    try {
      await bot.sendMessage(chatId, `‚úÖ ${removedItem.name} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞`)
      await showCart(chatId, userId) // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ—à–∏–∫ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    } catch (error) {
      console.error("Error removing from cart or showing updated cart:", error)
    }
  }
}

// –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
async function startCheckout(chatId, userId) {
  const cart = userCarts.get(userId) || []

  if (cart.length === 0) {
    try {
      await bot.sendMessage(chatId, "‚ùå –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏, —â–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
    } catch (error) {
      console.error("Error sending empty cart message at checkout start:", error)
    }
    return
  }

  userStates.set(chatId, { step: "awaiting_name", orderData: { cart: cart } })
  try {
    await bot.sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è (–ü–Ü–ë):", {
      reply_markup: {
        inline_keyboard: [[{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "cancel_order" }]],
      },
    })
  } catch (error) {
    console.error("Error starting checkout process:", error)
  }
}

// –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
async function cancelOrder(chatId) {
  userStates.delete(chatId)
  try {
    await bot.sendMessage(
      chatId,
      "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏ –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üõçÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥", callback_data: "catalog" }],
            [{ text: "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data: "back_to_main" }],
          ],
        },
      },
    )
  } catch (error) {
    console.error("Error sending cancel order message:", error)
  }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–±–æ—Ä—É –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö
async function finalizeOrder(chatId, userId, orderData) {
  let orderSummary = "üìã –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n\n"
  let total = 0

  orderSummary += "--- –¢–æ–≤–∞—Ä–∏ –≤ –∫–æ—à–∏–∫—É ---\n"
  orderData.cart.forEach((item, index) => {
    orderSummary += `${index + 1}. ${item.name}\n`
    orderSummary += `   üé® ${colorEmojis[item.color]}\n`
    orderSummary += `   üí∞ ${typeof item.price === "number" ? `$${item.price}` : "–¶—ñ–Ω—É —É—Ç–æ—á–Ω—é–π—Ç–µ"}\n\n`
    if (typeof item.price === "number") {
      total += item.price
    }
  })

  orderSummary += `--- –î–∞–Ω—ñ –ø–æ–∫—É–ø—Ü—è ---\n`
  orderSummary += `üë§ –ü–Ü–ë: ${orderData.fullName}\n`
  orderSummary += `üìß Email: ${orderData.email}\n`
  orderSummary += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.phone}\n`
  orderSummary += `üè† –ê–¥—Ä–µ—Å–∞: ${orderData.address}, ${orderData.city}\n\n`
  orderSummary += `üí≥ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${total > 0 ? `$${total}` : "–£—Ç–æ—á–Ω—é–π—Ç–µ"}\n\n`
  orderSummary += `üÜî –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: #${Date.now()}\n\n`
  orderSummary += `–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.`

  // –û—á–∏—â–∞—î–º–æ –∫–æ—à–∏–∫ –ø—ñ—Å–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è
  userCarts.delete(userId)

  const options = {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üõçÔ∏è –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "catalog" }],
        [{ text: "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data: "back_to_main" }],
      ],
    },
  }

  try {
    await bot.sendMessage(chatId, orderSummary, options)
  } catch (error) {
    console.error("Error sending final order summary:", error)
  }
}

// –ü—Ä–æ –Ω–∞—Å
async function showAbout(chatId) {
  const aboutMessage = `
‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω Soundcore

üéß –ú–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ—Å—è –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —è–∫—ñ—Å–Ω–∏—Ö –Ω–∞–≤—É—à–Ω–∏–∫—ñ–≤ Soundcore. –í—Å—ñ –Ω–∞–≤—É—à–Ω–∏–∫–∏ –Ω–æ–≤—ñ, –∞–ª–µ —É–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞. –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î.

‚úÖ –ù–∞—à—ñ –ø–µ—Ä–µ–≤–∞–≥–∏:
‚Ä¢ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –ø—Ä–æ–¥—É–∫—Ü—ñ—è
‚Ä¢ –®–≤–∏–¥–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞

üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏:
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +380123456789
‚Ä¢ Email: info@headphones.com
‚Ä¢ –ê–¥—Ä–µ—Å–∞: –º. –ö–∏—ó–≤, –≤—É–ª. –ú—É–∑–∏—á–Ω–∞, 1

üïí –†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:
–ü–Ω-–ü—Ç: 9:00-18:00
–°–±-–ù–¥: 10:00-16:00
  `

  const options = {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data: "catalog" }],
        [{ text: "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data: "back_to_main" }],
      ],
    },
  }

  try {
    await bot.sendMessage(chatId, aboutMessage, options)
  } catch (error) {
    console.error("Error sending about message:", error)
  }
}

export default app
