console.log("DEBUG: Bot file execution started at top of file!")
import TelegramBot from "node-telegram-bot-api"
import express from "express"
import fs from "fs"
import { createClient } from "@supabase/supabase-js"

console.log("DEBUG: Imports completed.")

const token = process.env.TELEGRAM_BOT_TOKEN
const app = express()
const port = process.env.PORT || 3000

console.log("DEBUG: Variables initialized. Token present:", !!token)

const supabaseUrl = process.env.SUPABASE_URL
const supabaseKey = process.env.SUPABASE_ANON_KEY
let supabase = null

if (supabaseUrl && supabaseKey) {
  supabase = createClient(supabaseUrl, supabaseKey)
  console.log("DEBUG: Supabase client initialized")
} else {
  console.log("DEBUG: Supabase not configured, using JSON file storage")
}

const bot = new TelegramBot(token)
app.use(express.json())

// –û–±—Ä–æ–±–∫–∞ webhook –∑–∞–ø–∏—Ç—ñ–≤
app.post(`/api/webhook`, (req, res) => {
  console.log("Received webhook request on /api/webhook!")
  bot.processUpdate(req.body)
  res.sendStatus(200)
})

// –ó–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É
app.get("/", (req, res) => {
  console.log("Received root path request on /!")
  res.send("Telegram Bot is running!")
})

// --- –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ ---
const headphones = {
  soundcore_p30i: {
    name: "Soundcore P30i",
    price: 79,
    colors: ["black", "pink"],
    images: [
      "https://yavcvvg6p1ggellz.public.blob.vercel-storage.com/soundcore_p30i_1-kcAQMNT5a6kIIQqY5lXtnDaAGavQKG.jpg",
      "https://yavcvvg6p1ggellz.public.blob.vercel-storage.com/soundcore_p30i_2-bX79umkTtrq2yo62ahrKvp6mGa4tKQE.jpg",
      "https://yavcvvg6p1ggellz.public.blob.vercel-storage.com/soundcore_p30i_3-GtcmrCnmgHnmgHnmgHnmgHnmgHnmgHn.jpg",
    ],
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –£–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_liberty_4: {
    name: "Soundcore Liberty 4",
    price: 129,
    colors: ["black"],
    images: ["/placeholder.svg?height=300&width=300&text=Soundcore+Liberty+4"],
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –£–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_liberty_3_pro: {
    name: "Soundcore Liberty 3 Pro",
    price: 99,
    colors: ["black", "white"],
    images: ["/placeholder.svg?height=300&width=300&text=Soundcore+Liberty+3+Pro"],
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –£–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_space_a40: {
    name: "Soundcore Space A40",
    price: 119,
    colors: ["black", "white", "dark_blue"],
    images: [
      "https://yavcvvg6p1ggellz.public.blob.vercel-storage.com/soundcore_space_a40_1-0ycNJVnpudGC0pzMCuPcNET7BooknJ.jpg",
      "https://yavcvvg6p1ggellz.public.blob.vercel-storage.com/soundcore_space_a40_2-GtcmrCnmgHnmgHnmgHnmgHnmgHnmgHn.jpg",
      "https://yavcvvg6p1ggellz.public.blob.vercel-storage.com/soundcore_space_a40_3-ZZCyKaBJnCG5UMcAmgCYCVDv2Q85df.jpg",
    ],
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –£–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_aerofit: {
    name: "Soundcore AeroFit",
    price: 139,
    colors: ["black", "pink"],
    images: ["/placeholder.svg?height=300&width=300&text=Soundcore+AeroFit"],
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –£–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_a20_sleep: {
    name: "Soundcore A20 Sleep",
    price: 149,
    colors: ["white"],
    images: ["/placeholder.svg?height=300&width=300&text=Soundcore+A20+Sleep"],
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –£–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_tune: {
    name: "Soundcore TUNE",
    price: 59,
    colors: ["black"],
    images: [
      "https://yavcvvg6p1ggellz.public.blob.vercel-storage.com/soundcore_tune_1-BTUMYLg6oThnZ59AM95MYGqbJJy.jpg",
      "https://yavcvvg6p1ggellz.public.blob.vercel-storage.com/soundcore_tune_2-1ZrRnQAg5sT64F3FqTDMgbSX3QJA.jpg",
      "https://yavcvvg6p1ggellz.public.blob.vercel-storage.com/soundcore_tune_3-1fVKxDM9Zy4vMuAYXfMUbf69etuMJI.jpg",
    ],
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –£–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_q21i_nc: {
    name: "Soundcore Q21i NC",
    price: 69,
    colors: ["black"],
    images: ["/placeholder.svg?height=300&width=300&text=Soundcore+Q21i+NC"],
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –£–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_space_one: {
    name: "Soundcore Space One",
    price: 109,
    colors: ["black", "light_blue"],
    images: [
      "https://yavcvvg6p1ggellz.public.blob.vercel-storage.com/soundcore_space_one_1-6HESgBFnIJjuCk3MXm4vXJtOXCUla.jpg",
    ],
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –£–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_space_one_pro: {
    name: "Soundcore Space One Pro",
    price: 159,
    colors: ["black", "cream"],
    images: [
      "https://yavcvvg6p1ggellz.public.blob.vercel-storage.com/soundcore_space_one_pro_1-WD5PCgRcABN3aVMG81XKXummsCM8.jpg",
      "https://yavcvvg6p1ggellz.public.blob.vercel-storage.com/soundcore_space_one_pro_2-Am35GdJb2u1xDJJdCRPRxpdfaP16.jpg",
      "https://yavcvvg6p1ggellz.public.blob.vercel-storage.com/soundcore_space_one_pro_3-IoIKdP9VzZdZKwIAeY9dnuEeofouoa.jpg",
    ],
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –ö–æ—Ä–æ–±–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_liberty_4_pro: {
    name: "Soundcore Liberty 4 Pro",
    price: 179,
    colors: ["black"],
    images: ["/placeholder.svg?height=300&width=300&text=Soundcore+Liberty+4+Pro"],
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –ö–æ—Ä–æ–±–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_liberty_4_nc: {
    name: "Soundcore Liberty 4 NC",
    price: 139,
    colors: ["black", "white", "blue"],
    images: ["/placeholder.svg?height=300&width=300&text=Soundcore+Liberty+4+NC"],
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –ö–æ—Ä–æ–±–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
  soundcore_aerofit_pro: {
    name: "Soundcore AeroFit Pro",
    price: 189,
    colors: ["black", "blue"],
    images: ["/placeholder.svg?height=300&width=300&text=Soundcore+AeroFit+Pro"],
    description: "–û—Ä–∏–≥—ñ–Ω–∞–ª / –ù–æ–≤—ñ / –ö–æ—Ä–æ–±–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ / –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î",
  },
}

// –ö–æ–ª—å–æ—Ä–∏ –∑ –µ–º–æ–¥–∑—ñ
const colorEmojis = {
  white: "‚ö™ –ë—ñ–ª–∏–π",
  black: "‚ö´ –ß–æ—Ä–Ω–∏–π",
  silver: "üîò –°—Ä—ñ–±–ª—è—Å—Ç–∏–π",
  blue: "üîµ –°–∏–Ω—ñ–π",
  red: "üî¥ –ß–µ—Ä–≤–æ–Ω–∏–π",
  pink: "üå∏ –†–æ–∂–µ–≤–∏–π",
  dark_blue: "üíô –¢–µ–º–Ω–æ-—Å–∏–Ω—ñ–π",
  light_blue: "üíß –°–≤—ñ—Ç–ª–æ-–±–ª–∞–∫–∏—Ç–Ω–∏–π",
  cream: "üç¶ –ö—Ä–µ–º–æ–≤–∏–π",
}
// ...existing code...

// --- –°—Ç–∞–Ω –¥–ª—è –∞–¥–º—ñ–Ω-—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ---
const adminStates = new Map();

// --- –ü–æ–∫—Ä–æ–∫–æ–≤–∞ –∑–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ---
bot.onText(/\/setstatus/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  if (!isAdmin(userId)) {
    await bot.sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.");
    return;
  }
  const orders = loadOrders();
  if (!orders.length) {
    await bot.sendMessage(chatId, "–ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î.");
    return;
  }
  // –í–∏–±—ñ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  const keyboard = orders.slice(-10).map(order => [
    { text: `#${order.id} (${order.customerData.fullName})`, callback_data: `admin_status_${order.id}` }
  ]);
  await bot.sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É:", {
    reply_markup: { inline_keyboard: keyboard }
  });
  adminStates.set(chatId, { step: "awaiting_status_order" });
});

// --- –ü–æ–∫—Ä–æ–∫–æ–≤–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ---
bot.onText(/\/editproducts/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  if (!isAdmin(userId)) {
    await bot.sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.");
    return;
  }
  const keyboard = Object.keys(headphones).map(id => [
    { text: headphones[id].name, callback_data: `admin_edit_${id}` }
  ]);
  keyboard.push([{ text: "‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä", callback_data: "admin_add_product" }]);
  await bot.sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", {
    reply_markup: { inline_keyboard: keyboard }
  });
  adminStates.set(chatId, { step: "edit_select" });
});

// --- –û–±—Ä–æ–±–∫–∞ callback_query –¥–ª—è –∞–¥–º—ñ–Ω-—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ---
bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;

  // --- –ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ---
  if (data.startsWith("admin_status_")) {
    if (!isAdmin(userId)) return;
    const orderId = data.replace("admin_status_", "");
    adminStates.set(chatId, { step: "awaiting_new_status", orderId });
    await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:");
    await bot.answerCallbackQuery(query.id);
    return;
  }

  // --- –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ---
  if (data.startsWith("admin_edit_")) {
    if (!isAdmin(userId)) return;
    const productId = data.replace("admin_edit_", "");
    adminStates.set(chatId, { step: "edit_menu", productId });
    await bot.sendMessage(chatId, "–©–æ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É", callback_data: `admin_edit_price_${productId}` }],
          [{ text: "–ó–º—ñ–Ω–∏—Ç–∏ –æ–ø–∏—Å", callback_data: `admin_edit_desc_${productId}` }],
          [{ text: "–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data: `admin_del_${productId}` }]
        ]
      }
    });
    await bot.answerCallbackQuery(query.id);
    return;
  }
  if (data.startsWith("admin_edit_price_")) {
    const productId = data.replace("admin_edit_price_", "");
    adminStates.set(chatId, { step: "awaiting_new_price", productId });
    await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É:");
    await bot.answerCallbackQuery(query.id);
    return;
  }
  if (data.startsWith("admin_edit_desc_")) {
    const productId = data.replace("admin_edit_desc_", "");
    adminStates.set(chatId, { step: "awaiting_new_desc", productId });
    await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å:");
    await bot.answerCallbackQuery(query.id);
    return;
  }
  if (data.startsWith("admin_del_")) {
    const productId = data.replace("admin_del_", "");
    if (headphones[productId]) {
      delete headphones[productId];
      await bot.sendMessage(chatId, "‚úÖ –¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ.");
    } else {
      await bot.sendMessage(chatId, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    }
    await bot.answerCallbackQuery(query.id);
    return;
  }
  if (data === "admin_add_product") {
    adminStates.set(chatId, { step: "awaiting_new_product_id" });
    await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å ID –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É (–ª–∞—Ç–∏–Ω–∏—Ü–µ—é):");
    await bot.answerCallbackQuery(query.id);
    return;
  }
});

// --- –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è –∞–¥–º—ñ–Ω-—Å—Ç–∞–Ω—ñ–≤ ---
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;
  if (!isAdmin(userId)) return;

  const state = adminStates.get(chatId);
  if (!state) return;

  // –ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  if (state.step === "awaiting_new_status") {
    const orders = loadOrders();
    const order = orders.find(o => String(o.id) === String(state.orderId));
    if (!order) {
      await bot.sendMessage(chatId, "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    } else {
      order.status = text;
      saveOrders(orders);
      await bot.sendMessage(chatId, `‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #${order.id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ "${text}".`);
    }
    adminStates.delete(chatId);
    return;
  }

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É
  if (state.step === "awaiting_new_product_id") {
    if (headphones[text]) {
      await bot.sendMessage(chatId, "‚ùå –¢–æ–≤–∞—Ä –∑ —Ç–∞–∫–∏–º ID –≤–∂–µ —ñ—Å–Ω—É—î. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π ID:");
      return;
    }
    state.newProduct = { id: text };
    state.step = "awaiting_new_product_name";
    adminStates.set(chatId, state);
    await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:");
    return;
  }
  if (state.step === "awaiting_new_product_name") {
    state.newProduct.name = text;
    state.step = "awaiting_new_product_price";
    adminStates.set(chatId, state);
    await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É:");
    return;
  }
  if (state.step === "awaiting_new_product_price") {
    const price = Number(text);
    if (isNaN(price)) {
      await bot.sendMessage(chatId, "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Ü—ñ–Ω—É (—á–∏—Å–ª–æ):");
      return;
    }
    state.newProduct.price = price;
    state.step = "awaiting_new_product_colors";
    adminStates.set(chatId, state);
    await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –∫–æ–ª—å–æ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: black,white):");
    return;
  }
  if (state.step === "awaiting_new_product_colors") {
    state.newProduct.colors = text.split(",").map(c => c.trim());
    state.step = "awaiting_new_product_desc";
    adminStates.set(chatId, state);
    await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:");
    return;
  }
  if (state.step === "awaiting_new_product_desc") {
    state.newProduct.description = text;
    state.step = "awaiting_new_product_images";
    adminStates.set(chatId, state);
    await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∫–æ–º—É:");
    return;
  }
  if (state.step === "awaiting_new_product_images") {
    state.newProduct.images = text.split(",").map(u => u.trim());
    const { id, name, price, colors, description, images } = state.newProduct;
    headphones[id] = { name, price, colors, description, images };
    await bot.sendMessage(chatId, `‚úÖ –¢–æ–≤–∞—Ä "${name}" –¥–æ–¥–∞–Ω–æ.`);
    adminStates.delete(chatId);
    return;
  }

  // –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏
  if (state.step === "awaiting_new_price") {
    const price = Number(text);
    if (isNaN(price)) {
      await bot.sendMessage(chatId, "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Ü—ñ–Ω—É (—á–∏—Å–ª–æ):");
      return;
    }
    const product = headphones[state.productId];
    if (!product) {
      await bot.sendMessage(chatId, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    } else {
      product.price = price;
      await bot.sendMessage(chatId, `‚úÖ –¶—ñ–Ω—É –¥–ª—è "${product.name}" –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ $${price}.`);
    }
    adminStates.delete(chatId);
    return;
  }
  // –ó–º—ñ–Ω–∞ –æ–ø–∏—Å—É
  if (state.step === "awaiting_new_desc") {
    const product = headphones[state.productId];
    if (!product) {
      await bot.sendMessage(chatId, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    } else {
      product.description = text;
      await bot.sendMessage(chatId, `‚úÖ –û–ø–∏—Å –¥–ª—è "${product.name}" –∑–º—ñ–Ω–µ–Ω–æ.`);
    }
    adminStates.delete(chatId);
    return;
  }
});

// --- –í–ò–î–ê–õ–Ü–¢–¨ —Å—Ç–∞—Ä—ñ –∞–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏ –Ω–∏–∂—á–µ (setstatus, addproduct, delproduct, setprice) ---
// ...–≤–∏–¥–∞–ª—ñ—Ç—å –±–ª–æ–∫–∏ –∑ bot.onText(/\/setstatus ...), bot.onText(/\/addproduct ...), bot.onText(/\/delproduct ...), bot.onText(/\/setprice ...)
// --- –ö–Ü–ù–ï–¶–¨ –í–ò–î–ê–õ–ï–ù–ù–Ø ---

// ...existing code...

// –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫–æ—à–∏–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–≤ –ø–∞–º'—è—Ç—ñ, –¥–∞–Ω—ñ –≤—Ç—Ä–∞—á–∞—é—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É)
const userCarts = new Map()

// –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
const userStates = new Map()

const ORDERS_FILE = "orders.json"

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
function loadOrders() {
  try {
    if (fs.existsSync(ORDERS_FILE)) {
      const data = fs.readFileSync(ORDERS_FILE, "utf8")
      return JSON.parse(data)
    }
  } catch (error) {
    console.error("Error loading orders:", error)
  }
  return []
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ —Ñ–∞–π–ª
function saveOrders(orders) {
  try {
    fs.writeFileSync(ORDERS_FILE, JSON.stringify(orders, null, 2))
  } catch (error) {
    console.error("Error saving orders:", error)
  }
}

async function saveOrderToSupabase(order) {
  if (!supabase) return false

  try {
    const { data, error } = await supabase.from("orders").insert([order]).select()

    if (error) {
      console.error("Error saving order to Supabase:", error)
      return false
    }

    console.log("Order saved to Supabase:", data)
    return true
  } catch (error) {
    console.error("Error saving order to Supabase:", error)
    return false
  }
}


// ===== –î–û–î–ê–ù–û: –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Supabase –∫–ª—ñ—î–Ω—Ç–∞–º–∏ =====
async function getCustomerFromSupabase(userId) {
  if (!supabase) return null;
  try {
    const { data, error } = await supabase
      .from("customers")
      .select("*")
      .eq("id", userId)
      .single();
    if (error && error.code !== "PGRST116") { // PGRST116 - no rows found
      console.error("Error fetching customer:", error);
    }
    return data || null;
  } catch (err) {
    console.error("Error in getCustomerFromSupabase:", err);
    return null;
  }
}

async function saveCustomerToSupabase(order) {
  if (!supabase) return false;
  try {
    const { error } = await supabase.from("customers").upsert([
      {
        id: order.userId,
        full_name: order.customerData.fullName,
        phone: order.customerData.phone,
        post_office: order.customerData.postOffice,
        city: order.customerData.city,
        username: order.customerData.username,
        created_at: new Date().toISOString()
      }
    ]);
    if (error) {
      console.error("Error saving customer:", error);
      return false;
    }
    return true;
  } catch (err) {
    console.error("Error in saveCustomerToSupabase:", err);
    return false;
  }
}

const allOrders = loadOrders()

// ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const ADMIN_ID = process.env.ADMIN_ID || 6486502899

const ORDERS_CHANNEL_ID = process.env.ORDERS_CHANNEL_ID || "-1002534353239"

// --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ callback –∑–∞–ø–∏—Ç—ñ–≤ ---
// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id
  userStates.delete(chatId)
  const welcomeMessage = `üéß –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É –Ω–∞–≤—É—à–Ω–∏–∫—ñ–≤ Soundcore!

–í—Å—ñ –Ω–∞–≤—É—à–Ω–∏–∫–∏ –Ω–æ–≤—ñ, –∞–ª–µ —É–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞. –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î.

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:`

  const options = {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üõçÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥", callback_data: "catalog" }],
        [{ text: "üõí –ú—ñ–π –∫–æ—à–∏–∫", callback_data: "cart" }],
        [{ text: "‚ö° –®–≤–∏–¥–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "quick_checkout" }],
        [{ text: "‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—Å", callback_data: "about" }],
      ],
    },
  }

  try {
    await bot.sendMessage(chatId, welcomeMessage, options)
  } catch (error) {
    console.error("Error sending /start message:", error)
  }
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–º–æ–≤–ª–µ–Ω—å
bot.onText(/\/orders/, async (msg) => {
  const chatId = msg.chat.id
  const userId = msg.from.id

  if (userId !== ADMIN_ID) {
    await bot.sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
    return
  }

  const orders = loadOrders()

  if (orders.length === 0) {
    await bot.sendMessage(chatId, "üìã –ó–∞–º–æ–≤–ª–µ–Ω—å –ø–æ–∫–∏ –Ω–µ–º–∞—î.")
    return
  }

  let ordersMessage = `üìã –í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (${orders.length}):\n\n`
  orders.slice(-10).forEach((order, index) => {
    ordersMessage += `üÜî #${order.id}\n`
    ordersMessage += `üë§ ${order.customerData.fullName}\n`
    ordersMessage += `üë®‚Äçüíª Username: ${order.customerData.username || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}\n`
    ordersMessage += `üìû ${order.customerData.phone}\n`
    ordersMessage += `üìß ${order.customerData.email}\n`
    ordersMessage += `üè† ${order.customerData.address}, ${order.customerData.city}\n`
    ordersMessage += `üí∞ –°—É–º–∞: ${order.total > 0 ? `$${order.total}` : "–£—Ç–æ—á–Ω—é–π—Ç–µ"}\n`
    ordersMessage += `üìÖ ${new Date(order.date).toLocaleString("uk-UA")}\n`
    ordersMessage += `üì¶ –¢–æ–≤–∞—Ä–∏:\n`

    if (order.items && Array.isArray(order.items)) {
      order.items.forEach((item, itemIndex) => {
        ordersMessage += `   ${itemIndex + 1}. ${item.name}\n`
        ordersMessage += `      üé® ${item.colorDisplay}\n`
        ordersMessage += `      üí∞ ${typeof item.price === "number" ? `$${item.price}` : "–¶—ñ–Ω—É —É—Ç–æ—á–Ω—é–π—Ç–µ"}\n`
      })
    }
    ordersMessage += `\n`
  })

  try {
    await bot.sendMessage(chatId, ordersMessage)
  } catch (error) {
    console.error("Error sending orders list:", error)
  }
})

// –û–±—Ä–æ–±–∫–∞ callback –∑–∞–ø–∏—Ç—ñ–≤
bot.on("callback_query", async (callbackQuery) => {
  console.log("Callback query handler triggered!")
  const message = callbackQuery.message
  const chatId = message.chat.id
  const data = callbackQuery.data
  const userId = callbackQuery.from.id
  console.log("DEBUG: Answered callback query:", callbackQuery.id)
  console.log("Received callback query data:", data)

  try {
    if (userStates.has(chatId) && data !== "cancel_order") {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–µ—Ä—à—ñ—Ç—å –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
      })
      return
    }

    if (data === "catalog") {
      await showCatalog(chatId)
    } else if (data === "cart") {
      await showCart(chatId, userId)
    } else if (data === "about") {
      await showAbout(chatId)
    } else if (data.startsWith("product_")) {
      const productId = data.replace("product_", "")
      await showProduct(chatId, productId, userId)
    } else if (data.startsWith("color_")) {
      const colorPrefix = "color_"
      const withoutPrefix = data.substring(colorPrefix.length)
      const lastUnderscoreIndex = withoutPrefix.lastIndexOf("_")
      const productId = withoutPrefix.substring(0, lastUnderscoreIndex)
      const color = withoutPrefix.substring(lastUnderscoreIndex + 1)
      await selectColor(chatId, userId, productId, color)
    } else if (data.startsWith("add_to_cart_")) {
      const [, , , productId, color] = data.split("_")
      await addToCart(chatId, userId, productId, color)
    } else if (data.startsWith("remove_")) {
      const itemIndex = Number.parseInt(data.replace("remove_", ""))
      await removeFromCart(chatId, userId, itemIndex)
    } else if (data === "checkout") {
      await startCheckout(chatId, userId)
    } else if (data === "quick_checkout") {
      const customer = await getCustomerFromSupabase(userId);
      const cart = userCarts.get(userId) || [];
      if (cart.length === 0) {
        await bot.sendMessage(chatId, "‚ùå –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.");
        return;
      }
      if (!customer) {
        await bot.sendMessage(chatId, "‚ÑπÔ∏è –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–≤–∏—á–∞–π–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º.");
        await startCheckout(chatId, userId);
        return;
      }
      const orderData = {
        fullName: customer.full_name,
        phone: customer.phone,
        postOffice: customer.post_office,
        city: customer.city,
        cart: cart
      };
      await finalizeOrder(chatId, userId, orderData);
} else if (data === "back_to_catalog") {
      await showCatalog(chatId)
    } else if (data === "back_to_main") {
      await showMainMenu(chatId)
    } else if (data === "cancel_order") {
      await cancelOrder(chatId)
    }

    await bot.answerCallbackQuery(callbackQuery.id)
  } catch (error) {
    console.error("Error handling callback:", error)
    await bot.answerCallbackQuery(callbackQuery.id, { text: "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞" })
  }
})

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–¥–ª—è –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è)
bot.on("message", async (msg) => {
  const chatId = msg.chat.id
  const userId = msg.from.id
  const text = msg.text

  if (text.startsWith("/") && text !== "/start") {
    if (userStates.has(chatId)) {
      await bot.sendMessage(
        chatId,
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–µ—Ä—à—ñ—Ç—å –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –ø–µ—Ä—à –Ω—ñ–∂ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏.",
      )
    }
    return
  }

  if (text === "/start") {
    return
  }

  const currentState = userStates.get(chatId)
  if (currentState) {
    try {
      switch (currentState.step) {
        case "awaiting_name":
          currentState.orderData.fullName = text
          currentState.step = "awaiting_phone"
          await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, +380XXXXXXXXX):", {
            reply_markup: {
              inline_keyboard: [[{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "cancel_order" }]],
            },
          })
          break
        case "awaiting_phone":
          if (!/^\+?\d{10,15}$/.test(text)) {
            await bot.sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
            return
          }
          currentState.orderData.phone = text
          currentState.step = "awaiting_post_office"
          await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–∞ –Ω–∞–∑–≤—É –ø–æ—à—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ù–æ–≤–∞ –ü–æ—à—Ç–∞ ‚Ññ5, –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫ 1):", {
            reply_markup: {
              inline_keyboard: [[{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "cancel_order" }]],
            },
          })
          break
        case "awaiting_post_office":
          currentState.orderData.postOffice = text
          currentState.step = "awaiting_city"
          await bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:", {
            reply_markup: {
              inline_keyboard: [[{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "cancel_order" }]],
            },
          })
          break
        case "awaiting_city":
          currentState.orderData.city = text
          userStates.delete(chatId)
          await finalizeOrder(chatId, userId, currentState.orderData)
          break
      }
    } catch (error) {
      console.error("Error processing user input:", error)
      await bot.sendMessage(
        chatId,
        "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
      )
    }
  }
})

// –ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async function showMainMenu(chatId) {
  const welcomeMessage = `üéß –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É –Ω–∞–≤—É—à–Ω–∏–∫—ñ–≤ Soundcore!

–í—Å—ñ –Ω–∞–≤—É—à–Ω–∏–∫–∏ –Ω–æ–≤—ñ, –∞–ª–µ —É–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞. –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î.

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:`

  const options = {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üõçÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥", callback_data: "catalog" }],
        [{ text: "üõí –ú—ñ–π –∫–æ—à–∏–∫", callback_data: "cart" }],
        [{ text: "‚ö° –®–≤–∏–¥–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "quick_checkout" }],
        [{ text: "‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—Å", callback_data: "about" }],
      ],
    },
  }

  try {
    await bot.sendMessage(chatId, welcomeMessage, options)
  } catch (error) {
    console.error("Error sending main menu message:", error)
  }
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥
async function showCatalog(chatId) {
  const catalogMessage = "üéß –ö–∞—Ç–∞–ª–æ–≥ –Ω–∞–≤—É—à–Ω–∏–∫—ñ–≤ Soundcore:\n\n–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É:"

  const keyboard = Object.keys(headphones).map((productId) => [
    {
      text: `${headphones[productId].name} ${typeof headphones[productId].price === "number" ? `- $${headphones[productId].price}` : ""}`,
      callback_data: `product_${productId}`,
    },
  ])

  keyboard.push([{ text: "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data: "back_to_main" }])

  const options = {
    reply_markup: {
      inline_keyboard: keyboard,
    },
  }

  try {
    await bot.sendMessage(chatId, catalogMessage, options)
  } catch (error) {
    console.error("Error sending catalog message:", error)
  }
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç
async function showProduct(chatId, productId, userId) {
  const product = headphones[productId]
  if (!product) return

  const productMessage = `üéß ${product.name}

${typeof product.price === "number" ? `üí∞ –¶—ñ–Ω–∞: $${product.price}` : "üí∞ –¶—ñ–Ω–∞: –£—Ç–æ—á–Ω—é–π—Ç–µ"}

üìù ${product.description}

üé® –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–ª—å–æ—Ä–∏:`

  const colorKeyboard = product.colors.map((color) => [
    {
      text: colorEmojis[color],
      callback_data: `color_${productId}_${color}`,
    },
  ])

  colorKeyboard.push([{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data: "back_to_catalog" }])

  const options = {
    reply_markup: {
      inline_keyboard: colorKeyboard,
    },
  }

  try {
    // Use placeholder image for all products to avoid errors
    const placeholderUrl = `/placeholder.svg?height=400&width=400&text=${encodeURIComponent(product.name)}`
    console.log(`DEBUG: Using placeholder for product ${productId}:`, placeholderUrl)

    await bot.sendPhoto(chatId, placeholderUrl, {
      caption: productMessage,
      reply_markup: options.reply_markup,
    })

    console.log(`DEBUG: Successfully sent placeholder for product ${productId}`)
  } catch (error) {
    console.error(`Error sending product photo for ${productId}:`, error)
    try {
      await bot.sendMessage(chatId, productMessage, options)
    } catch (fallbackError) {
      console.error("Error sending fallback message:", fallbackError)
    }
  }
}

// –í–∏–±—ñ—Ä –∫–æ–ª—å–æ—Ä—É - —Ç–µ–ø–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞—î –¥–æ –∫–æ—à–∏–∫–∞
async function selectColor(chatId, userId, productId, color) {
  const product = headphones[productId]
  if (!product) return

  if (!userCarts.has(userId)) {
    userCarts.set(userId, [])
  }

  const cart = userCarts.get(userId)
  cart.push({
    productId,
    name: product.name,
    color,
    price: product.price,
  })

  const successMessage = `‚úÖ –¢–æ–≤–∞—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!

üéß ${product.name}
üé® ${colorEmojis[color]}
${typeof product.price === "number" ? `üí∞ $${product.price}` : "üí∞ –¶—ñ–Ω—É —É—Ç–æ—á–Ω—é–π—Ç–µ"}

–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?`

  const options = {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üõí –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", callback_data: "cart" }],
        [{ text: "üõçÔ∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏", callback_data: "catalog" }],
        [{ text: "üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "checkout" }],
      ],
    },
  }

  try {
    await bot.sendMessage(chatId, successMessage, options)
  } catch (error) {
    console.error("Error sending auto add to cart message:", error)
  }
}

// –î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞
async function addToCart(chatId, userId, productId, color) {
  const product = headphones[productId]
  if (!product) return

  if (!userCarts.has(userId)) {
    userCarts.set(userId, [])
  }

  const cart = userCarts.get(userId)
  cart.push({
    productId,
    name: product.name,
    color,
    price: product.price,
  })

  const successMessage = `‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!

üéß ${product.name}
üé® ${colorEmojis[color]}
${typeof product.price === "number" ? `$${product.price}` : "üí∞ –¶—ñ–Ω—É —É—Ç–æ—á–Ω—é–π—Ç–µ"}

–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?`

  const options = {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üõí –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", callback_data: "cart" }],
        [{ text: "üõçÔ∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏", callback_data: "catalog" }],
        [{ text: "üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "checkout" }],
      ],
    },
  }

  try {
    await bot.sendMessage(chatId, successMessage, options)
  } catch (error) {
    console.error("Error sending add to cart message:", error)
  }
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—à–∏–∫
async function showCart(chatId, userId) {
  const cart = userCarts.get(userId) || []

  if (cart.length === 0) {
    const emptyMessage = "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π\n\n–ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–æ–≤–∞—Ä—ñ–≤."
    const options = {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data: "catalog" }],
          [{ text: "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data: "back_to_main" }],
        ],
      },
    }

    try {
      await bot.sendMessage(chatId, emptyMessage, options)
    } catch (error) {
      console.error("Error sending empty cart message:", error)
    }
    return
  }

  let cartMessage = "üõí –í–∞—à –∫–æ—à–∏–∫:\n\n"
  let total = 0

  cart.forEach((item, index) => {
    cartMessage += `${index + 1}. ${item.name}\n`
    cartMessage += `   üé® ${colorEmojis[item.color]}\n`
    cartMessage += `   üí∞ ${typeof item.price === "number" ? `$${item.price}` : "–¶—ñ–Ω—É —É—Ç–æ—á–Ω—é–π—Ç–µ"}\n\n`

    if (typeof item.price === "number") {
      total += item.price
    }
  })

  cartMessage += `üí≥ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${total > 0 ? `$${total}` : "–£—Ç–æ—á–Ω—é–π—Ç–µ"}`

  const keyboard = cart.map((item, index) => [{ text: `‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ ${item.name}`, callback_data: `remove_${index}` }])

  keyboard.push(
    [{ text: "üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "checkout" }],
    [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data: "back_to_catalog" }],
    [{ text: "üõçÔ∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏", callback_data: "catalog" }],
  )

  const options = {
    reply_markup: {
      inline_keyboard: keyboard,
    },
  }

  try {
    await bot.sendMessage(chatId, cartMessage, options)
  } catch (error) {
    console.error("Error sending cart message:", error)
  }
}

// –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –∫–æ—à–∏–∫–∞
async function removeFromCart(chatId, userId, itemIndex) {
  const cart = userCarts.get(userId) || []

  if (itemIndex >= 0 && itemIndex < cart.length) {
    const removedItem = cart.splice(itemIndex, 1)[0]
    try {
      await bot.sendMessage(chatId, `‚úÖ ${removedItem.name} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞`)
      if (cart.length > 0) {
        await showCart(chatId, userId)
      } else {
        await bot.sendMessage(chatId, "üõí –í–∞—à –∫–æ—à–∏–∫ —Ç–µ–ø–µ—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π", {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data: "catalog" }],
              [{ text: "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data: "back_to_main" }],
            ],
          },
        })
      }
    } catch (error) {
      console.error("Error removing from cart or showing updated cart:", error)
    }
  } else {
    try {
      await bot.sendMessage(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ—à–∏–∫—É")
      await showCart(chatId, userId)
    } catch (error) {
      console.error("Error sending error message:", error)
    }
  }
}

// –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
async function startCheckout(chatId, userId) {
  const cart = userCarts.get(userId) || []

  if (cart.length === 0) {
    try {
      await bot.sendMessage(chatId, "‚ùå –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏, —â–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
    } catch (error) {
      console.error("Error sending empty cart message at checkout start:", error)
    }
    return
  }

  userStates.set(chatId, { step: "awaiting_name", orderData: { cart: cart } })

  try {
    await bot.sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è (–ü–Ü–ë):", {
      reply_markup: {
        inline_keyboard: [[{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "cancel_order" }]],
      },
    })
  } catch (error) {
    console.error("Error starting checkout process:", error)
  }
}

// –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
async function cancelOrder(chatId) {
  userStates.delete(chatId)

  try {
    await bot.sendMessage(
      chatId,
      "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏ –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üõçÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥", callback_data: "catalog" }],
            [{ text: "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data: "back_to_main" }],
          ],
        },
      },
    )
  } catch (error) {
    console.error("Error sending cancel order message:", error)
  }
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞—Å
async function showAbout(chatId) {
  const aboutMessage =
    "‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—Å:\n\n–ú–∏ - –º–∞–≥–∞–∑–∏–Ω –Ω–∞–≤—É—à–Ω–∏–∫—ñ–≤ Soundcore. –í—Å—ñ –Ω–∞—à—ñ —Ç–æ–≤–∞—Ä–∏ –Ω–æ–≤—ñ, –∞–ª–µ —É–ø–∞–∫–æ–≤–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞. –ì–∞—Ä–∞–Ω—Ç—ñ–π –Ω–µ–º–∞—î."

  const options = {
    reply_markup: {
      inline_keyboard: [[{ text: "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data: "back_to_main" }]],
    },
  }

  try {
    await bot.sendMessage(chatId, aboutMessage, options)
  } catch (error) {
    console.error("Error sending about message:", error)
  }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–±–æ—Ä—É –≤—Å—ñ—Ö –¥–∞–Ω–Ω–∏—Ö
async function finalizeOrder(chatId, userId, orderData) {
  let orderSummary = "üìã –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n\n"
  let total = 0
  orderSummary += "--- –¢–æ–≤–∞—Ä–∏ –≤ –∫–æ—à–∏–∫—É ---\n"
  orderData.cart.forEach((item, index) => {
    orderSummary += `${index + 1}. ${item.name}\n`
    orderSummary += `   üé® ${colorEmojis[item.color]}\n`
    orderSummary += `   üí∞ ${typeof item.price === "number" ? `$${item.price}` : "–¶—ñ–Ω—É —É—Ç–æ—á–Ω—é–π—Ç–µ"}\n\n`
    if (typeof item.price === "number") {
      total += item.price
    }
  })

  let username = "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
  try {
    const chatMember = await bot.getChatMember(chatId, userId)
    username = chatMember.user.username || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
  } catch (error) {
    console.log("Could not get username:", error.message)
  }

  orderSummary += `--- –î–∞–Ω—ñ –ø–æ–∫—É–ø—Ü—è ---\n`
  orderSummary += `üë§ –ü–Ü–ë: ${orderData.fullName}\n`
  orderSummary += `üë®‚Äçüíª Username: @${username}\n`
  orderSummary += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.phone}\n`
  orderSummary += `üìÆ –ü–æ—à—Ç–∞: ${orderData.postOffice}, ${orderData.city}\n\n`
  orderSummary += `üí≥ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${total > 0 ? `$${total}` : "–£—Ç–æ—á–Ω—é–π—Ç–µ"}\n\n`

  const orderId = Date.now()
  orderSummary += `üÜî –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: #${orderId}\n\n`
  orderSummary += `–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.`

  const order = {
    id: orderId,
    userId: userId,
    chatId: chatId,
    date: new Date().toISOString(),
    customerData: {
      fullName: orderData.fullName,
      phone: orderData.phone,
      postOffice: orderData.postOffice,
      city: orderData.city,
      username: username,
    },
    items: orderData.cart.map((item) => ({
      productId: item.productId,
      name: item.name,
      color: item.color,
      colorDisplay: colorEmojis[item.color],
      price: item.price,
    })),
    total: total > 0 ? total : "–£—Ç–æ—á–Ω—é–π—Ç–µ",
    status: "–Ω–æ–≤–∏–π",
  }

  await saveCustomerToSupabase(order);
  allOrders.push(order)
  saveOrders(allOrders)

  if (supabase) {
    await saveOrderToSupabase(order)
  }

  userCarts.delete(userId)

  const options = {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üõçÔ∏è –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data: "catalog" }],
        [{ text: "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data: "back_to_main" }],
      ],
    },
  }

  try {
    await bot.sendMessage(chatId, orderSummary, options)

    console.log("DEBUG: Attempting to send to channel:", ORDERS_CHANNEL_ID)
    if (ORDERS_CHANNEL_ID && ORDERS_CHANNEL_ID !== "undefined") {
      const channelMessage = `üîî –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #${orderId}\n\n${orderSummary}`
      try {
        await bot.sendMessage(ORDERS_CHANNEL_ID, channelMessage)
        console.log("DEBUG: Successfully sent to channel")
      } catch (channelError) {
        console.error("Error sending channel notification:", channelError)
        console.error("Channel ID used:", ORDERS_CHANNEL_ID)

        // Fallback to admin
        if (ADMIN_ID) {
          try {
            const adminMessage = `üîî –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #${orderId}\n\n${orderSummary}`
            await bot.sendMessage(ADMIN_ID, adminMessage)
            console.log("DEBUG: Sent to admin as fallback")
          } catch (adminError) {
            console.error("Error sending admin notification:", adminError)
          }
        }
      }
    } else {
      console.log("DEBUG: No valid channel ID, sending to admin")
      if (ADMIN_ID) {
        try {
          const adminMessage = `üîî –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #${orderId}\n\n${orderSummary}`
          await bot.sendMessage(ADMIN_ID, adminMessage)
        } catch (adminError) {
          console.error("Error sending admin notification:", adminError)
        }
      }
    }
  } catch (error) {
    console.error("Error sending final order summary:", error)
  }
}

export default app
